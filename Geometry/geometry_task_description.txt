Task description
In this problem, you need to implement a set of classes for solving geometric problems on a plane. All coordinates are assumed to be integer.

The Vector class for a vector on a plane, you must implement the following methods and overload the corresponding operators:

1. Default constructor (creates a null vector)
2. Constructor from two integer variables (creates a vector with corresponding coordinates)
3. Operator * for dot product
4. Operator ^ for cross product
5. Addition/difference operators with another vector, respectively implement += and -= operators
6. Operator of multiplication by a number (make it so that both vector-by-number and number-by-vector multiplications are allowed), implement the *= operator
8. Unary minus operator to get vector in opposite direction
9. GetX() and GetY() methods for getting the corresponding coordinates
Create a set of classes - shapes that are inherited from the abstract IShape class for working with two-dimensional primitives:

Point or point (created from two int64_t coordinates)
1. Segment or segment (created from two Point)
2. Line or straight line (created from two Point)
3. Ray or beam (created from two Point)
4. Circle or circle (created from a Point and a radius of type size_t)
5. Every class should have getters:

Point: GetX, GetY (coordinates)
Segment: GetA, GetB (beginning, end of segment)
Line: GetA, GetB, GetC where a b c are the coefficients of the equation of the line ax + by + c up to a multiplier (that is, 10x + 20y + 30 is the same as 5x + 10y + 15)
Ray: GetA - start point and GetVector - direction vector
Circle: GetCentre and GetRadius
Provide the following methods in the base class:

void Move(const Vector&) - move the figure by the corresponding vector
bool ContainsPoint(const Point&) - check if the figure contains a point
bool CrossSegment(const Segment&) - check if the segment crosses the figure
IShape* Clone() - return a pointer to a copy of the shape

Derived classes must implement these methods.

In this task, you need to define all classes, methods, functions so that the proposed testing code outputs the expected result in accordance with generally accepted semantics (in particular, note that the testing code requires an overload of the difference of two points operation).
