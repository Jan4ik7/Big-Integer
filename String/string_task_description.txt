Implementation details
You are required to implement the String class, a simplified version of std::string. The class must support the following functionality:

Default constructor - creates an empty string, no memory is allocated!

Constructor that takes size and character (in that order) - creates a string of length size filled with characters

Constructor from const char*, in order to find out the length of a C-style string, use the strlen function

Rule of three:

copy constructor
Copy assignment operator
Destructor

Clear() method - sets size to 0, deallocating the allocated memory does NOT occur

PushBack(character) method - adds the letter character to the end of the string

PopBack() method - removes the last letter. Should do nothing in case of empty string, although for std::string it would be UB

Resize(new_size) method - resizes to new_size. If the capacity does not allow storing so many characters, then a new buffer with a capacity of new_size is allocated.

The Resize(new_size, character) method is the same as Resize(new_size), but in the case of new_size > size, fills in the missing elements with the character value.

The Reserve(new_cap) method - changes the capacity to max(new_cap, current capacity) (if new_cap <= current capacity, then nothing needs to be done). The size does not change.

ShrinkToFit() method - reduces capacity to size (if capacity > size)

The Swap(other) method - swaps the content with another string other. Should run in O(1)

Const and non-const access operator by index []. Non-const should allow changing the received element (a[1] = 5)

Methods Front () and Back () - access to the first and last characters (also two versions each).

Empty() method - true if the string is empty (size 0)

Size() method - returns the size

Capacity() method - returns the capacity

Data() method - returns a pointer to the beginning of the array.

Comparison operators (<, >, <=, >=, ==, !=) specifying lexicographic order

Operators + and += for string concatenation. For example, "ab" + "oba" = "aboba". The operation s += t should run in O(|t|)!!! Otherwise, do not wait for the results of testing and burn testing servers

Number multiplication operator. It takes a string str and a number n (in that order) and will return a string of the form str + ... + str (n times). Time complexity should be O(result length). Multiplying a number by a string should result in a compilation error! The riddle of a lecturer on algorithms - do you have an analogy with some algorithm you know?)

Operators for input from a stream and output to a stream.

The std::vector<String> Split(const String& delim = " ") method is an analogue of split in python.

The String Join(const std::vector<String>& strings) method is an analogue of a join in python.
